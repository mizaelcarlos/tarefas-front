{"remainingRequest":"C:\\wamp64\\www\\tarefas-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\wamp64\\www\\tarefas-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\wamp64\\www\\tarefas-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wamp64\\www\\tarefas-front\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\wamp64\\www\\tarefas-front\\src\\App.vue","mtime":1625428540876},{"path":"C:\\wamp64\\www\\tarefas-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\tarefas-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\tarefas-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\tarefas-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sIFsKICAgIF92bS5fbSgwKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJmb3JtIiwKICAgICAgICB7CiAgICAgICAgICBvbjogewogICAgICAgICAgICBzdWJtaXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgcmV0dXJuIF92bS5zYWx2YXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygibGFiZWwiLCBbX3ZtLl92KCJUaXR1bG8iKV0pLAogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udGFyZWZhLnRpdHVsbywKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0YXJlZmEudGl0dWxvIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIlRpdHVsbyIgfSwKICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS50YXJlZmEudGl0dWxvIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnRhcmVmYSwgInRpdHVsbyIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIkRlc2NyacOnw6NvIildKSwKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRhcmVmYS5kZXNjcmljYW8sCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGFyZWZhLmRlc2NyaWNhbyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgcGxhY2Vob2xkZXI6ICJEZXNjcmnDp8OjbyIgfSwKICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS50YXJlZmEuZGVzY3JpY2FvIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnRhcmVmYSwgImRlc2NyaWNhbyIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIkZlaXRhIildKSwKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRhcmVmYS5mZWl0YSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0YXJlZmEuZmVpdGEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIHBsYWNlaG9sZGVyOiAiVGFyZWFmYSBjb25jbHXDrWRhPyIgfSwKICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS50YXJlZmEuZmVpdGEgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0udGFyZWZhLCAiZmVpdGEiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygibGFiZWwiLCBbX3ZtLl92KCJUaXBvIildKSwKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRhcmVmYS50aXBvX2lkLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRhcmVmYS50aXBvX2lkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogIm51bWJlciIsIHBsYWNlaG9sZGVyOiAiVGlwbyIgfSwKICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS50YXJlZmEudGlwb19pZCB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS50YXJlZmEsICJ0aXBvX2lkIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl9tKDEpCiAgICAgICAgXQogICAgICApLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgIF9jKAogICAgICAgICAgInRib2R5IiwKICAgICAgICAgIF92bS5fbChfdm0udGFyZWZhcywgZnVuY3Rpb24odGFyZWZhKSB7CiAgICAgICAgICAgIHJldHVybiBfYygidHIiLCB7IGtleTogdGFyZWZhLmlkIH0sIFsKICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyh0YXJlZmEudGl0dWxvKSldKSwKICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyh0YXJlZmEuZGVzY3JpY2FvKSldKSwKICAgICAgICAgICAgICB0YXJlZmEuZmVpdGEgPT0gMAogICAgICAgICAgICAgICAgPyBfYygidGQiLCBbX3ZtLl92KCJOw6NvIildKQogICAgICAgICAgICAgICAgOiBfYygidGQiLCBbX3ZtLl92KCJTaW0iKV0pLAogICAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKHRhcmVmYS50aXBvX2lkKSldKSwKICAgICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIndhdmVzLWVmZmVjdCBidG4tc21hbGwgYmx1ZSBkYXJrZW4tMSIsCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5lZGl0YXIodGFyZWZhKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogIm1hdGVyaWFsLWljb25zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoImNyZWF0ZSIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2F2ZXMtZWZmZWN0IGJ0bi1zbWFsbCByZWQgZGFya2VuLTEiLAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ucmVtb3Zlcih0YXJlZmEpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtaWNvbnMiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiZGVsZXRlX3N3ZWVwIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIH0pLAogICAgICAgICAgMAogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoIm5hdiIsIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtd3JhcHBlciBibHVlIGRhcmtlbi0xIiB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiYnJhbmQtbG9nbyBjZW50ZXIiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlRhcmVmYXMgRnJvbnQiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiYnV0dG9uIiwgeyBzdGF0aWNDbGFzczogIndhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBidG4tc21hbGwiIH0sIFsKICAgICAgX3ZtLl92KCJTYWx2YXIiKSwKICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAibWF0ZXJpYWwtaWNvbnMgbGVmdCIgfSwgW192bS5fdigic2F2ZSIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0aGVhZCIsIFsKICAgICAgX2MoInRyIiwgWwogICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlRpdHVsbyIpXSksCiAgICAgICAgX2MoInRoIiwgW192bS5fdigiRGVzY3Jpw6fDo28iKV0pLAogICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkNvbmNsdcOtZGE/IildKSwKICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJUaXBvIildKSwKICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJPUMOHw5VFUyIpXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}